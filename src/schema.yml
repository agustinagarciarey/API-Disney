openapi: 3.0.1
info:
  title: API Disney
  version: 1.0.0
servers:
  - url: "http://localhost:3000"
    description: Local Server

tags:
  - name: User
    description: User handler
  - name: Film
    description: Film handler
  - name: Character
    description: Character handler

paths:

  /users/signup:
    post:
      tags:
        - User
      summary: Signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BodySignup"
        required: true
      responses:
        200:
          description: El usuario fue creado con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: User token
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiJGdzZRbXc1WUZ6UXhWenJKcmVHSCIsImV4cCI6MTYzMTI4MjM2OH0.-T2ofAXiYNsHFmS3QTod8FjArlbSo8-A5snx_4rH3lE
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/ServerError"
        535:
          $ref: "#/components/responses/EmailError"


  /users/login:
    post:
      tags:
        - User
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BodyLogin"
        required: true
      responses:
        200:
          description: Éxito al iniciar sesión 
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: User token
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiJGdzZRbXc1WUZ6UXhWenJKcmVHSCIsImV4cCI6MTYzMTI4MjM2OH0.-T2ofAXiYNsHFmS3QTod8FjArlbSo8-A5snx_4rH3lE

        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/ServerError"

  /movies/add:
    post:
      tags:
        - Film
      summary: Create film
      security:
        - userToken: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/BodyCreateFilm"
            encoding: 
                image: 
                  contentType: image/png, image/jpeg, image/jpg
        required: true
      responses:
        200:
          description: La película o serie se creó con éxito
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"
          
  /movies/:
    get:
      tags:
        - Film
      summary: Get films
      security:
        - userToken: []
      parameters:
      - name: name
        in: query
        required: false
        description: Nombre de la película o serie
        example: Star Wars 
        schema:
          type: string
      - name: genre
        in: query
        required: false
        description: ID del Género de la película o serie
        example: 1
        schema:
          type: number
      - name: order
        in: query
        required: false
        description: Orden para mostrar los datos según fecha de creación
        example: DESC
        schema:
          type: string
          enum: [ASC, DESC]
      responses:
        200:
          description: Películas y series obtenidas con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseGetFilms"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"
          
  /movies/{id}:
    get:
      tags:
        - Film
      summary: Get film
      security:
        - userToken: []
      parameters:
      - name: id
        in: path
        required: true
        description: ID de la película o serie
        example: 1
        schema:
          type: number
      responses:
        200:
          description: Película o serie obtenida con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseGetFilm"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    
    put:
      tags:
        - Film
      summary: Update film
      security:
        - userToken: []
      parameters:
      - name: id
        in: path
        required: true
        description: ID de la película o serie
        example: 1
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BodyUpdateFilm"
        required: true
      responses:
        200:
          description: Película o serie modificada con éxito
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    
    delete:
      tags:
        - Film
      summary: Delete film
      security:
        - userToken: []
      parameters:
      - name: id
        in: path
        required: true
        description: ID de la película o serie
        example: 1
        schema:
          type: string
      responses:
        200:
          description: Película o serie eliminada con éxito
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
          
  /movies/image/{id}:
    put:
      tags:
        - Film
      summary: Update image
      security:
        - userToken: []
      parameters:
      - name: id
        in: path
        required: true
        description: ID de la película o serie
        example: 1
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
            encoding: 
                image: 
                  contentType: image/png, image/jpeg, image/jpg
        required: true
      responses:
        200:
          description: Película o serie modificada con éxito
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
          
  /characters/add:
    post:
      tags:
        - Character
      summary: Create character
      security:
        - userToken: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/BodyCreateCharacter"
            encoding: 
                image: 
                  contentType: image/png, image/jpeg, image/jpg
        required: true
      responses:
        200:
          description: El personaje se creó con éxito
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"
  
  /characters:
    get:
      tags:
        - Character
      summary: Get characters
      security:
        - userToken: []
      parameters:
      - name: name
        in: query
        required: false
        description: Nombre del personaje
        example: Loki
        schema:
          type: string
      - name: age
        in: query
        required: false
        description: Edad del personaje
        example: 8
        schema:
          type: number
      - name: weight
        in: query
        required: false
        description: Peso del personaje
        example: 10
        schema:
          type: number
      - name: movies
        in: query
        required: false
        description: ID de Películas y series en las que participó
        schema:
          type: array
          uniqueItems: true
          items:
            type: number
          example:
            - 2
      responses:
        200:
          description: Películas y series obtenidas con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseGetCharacters"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"
          
    
  /characters/{id}:
    get:
      tags:
        - Character
      summary: Get character
      security:
        - userToken: []
      parameters:
      - name: id
        in: path
        required: true
        description: ID del personaje
        example: 1
        schema:
          type: string
      responses:
        200:
          description: Personaje obtenido con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseGetCharacter"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    
    put:
      tags:
        - Character
      summary: Update character
      security:
        - userToken: []
      parameters:
      - name: id
        in: path
        required: true
        description: ID del personaje
        example: 1
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BodyUpdateCharacter"
        required: true
      responses:
        200:
          description: Personaje modificado con éxito
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    
    delete:
      tags:
        - Character
      summary: Delete character
      security:
        - userToken: []
      parameters:
      - name: id
        in: path
        required: true
        description: ID del personaje
        example: 1
        schema:
          type: string
      responses:
        200:
          description: Personaje eliminado con éxito
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
          
  /characters/image/{id}:
    put:
      tags:
        - Character
      summary: Update image
      security:
        - userToken: []
      parameters:
      - name: id
        in: path
        required: true
        description: ID del personaje
        example: 1
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
            encoding: 
                image: 
                  contentType: image/png, image/jpeg, image/jpg
        required: true
      responses:
        200:
          description: Personaje modificado con éxito
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
components:
  securitySchemes:
    userToken:
      type: http
      scheme: bearer
      description: Para obtener el token inicie sesión o registre su usuario

  responses:
    Unauthorized:
      description: Usuario no autorizado

    NotFound:
      description: Datos no encontrados

    BadRequest:
      description: Error en el tipo de dato o campos incompletos

    ServerError:
      description: Error interno del servidor

    EmailError:
      description: Error en el envío de mail
    


  schemas:
    BodySignup:
      type: object
      required:
        - name
        - surname
        - mail
        - password
      properties:
        name:
          type: string
          maximum: 50
          minimum: 3
          example: Agustina
        surname:
          type: string
          example: García Rey
        mail:
          type: string
          example: agus.garciarey@gmail.com
        password:
          type: string
          example: Disney123

    BodyLogin:
      type: object
      required:
        - mail
        - password
      properties:
        mail:
          type: string
          example: agus.garciarey@gmail.com
        password:
          type: string
          example: Disney123
  
    BodyCreateFilm:
      type: object
      required:
        - title
        - image
        - year
        - rating
        - genreId
      properties:
        title:
          type: string
          maximum: 80
          example: Star Wars Episode III Revenge of the Sith
        image:
            type: string
            format: binary
        year:
          type: number
          example: 2005
        rating:
          type: number
          example: 4.7
        genreId:
          type: number
          description: 1.Ciencia ficción 2.Drama 3.Comedia 4.Acción
          example: 1
        characters:
          type: array
          description: Enter character already created. If they still do not exist, leave this field empty.
          uniqueItems: true
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
          example:
            - name: Anakin Skywalker
            
    BodyUpdateFilm:
      type: object
      required:
        - title
        - year
        - rating
        - genreId
      properties:
        title:
          type: string
          maximum: 80
          example: Star Wars Episode III Revenge of the Sith
        year:
          type: number
          example: 2005
        rating:
          type: number
          example: 4.7
        genreId:
          type: number
          description: 1.Ciencia ficción 2.Drama 3.Comedia 4.Acción
          example: 1
        characters:
          type: array
          description: Enter characters already created. If they still do not exist, leave this field empty.
          uniqueItems: true
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
          example:
            - name: Anakin Skywalker
            
    ResponseGetFilm:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        imageURL:
          type: string
          format: binary
        imagePublicId:
          type: string
        year:
          type: number
        rating:
          type: number
        genre:
          type: string
        characters:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        
          
    ResponseGetFilms:
      type: array
      items:
          $ref: '#/components/schemas/ResponseGetFilm'
          
    BodyCreateCharacter:
      type: object
      required:
        - name
        - image
        - age
        - weight
        - history
      properties:
        name:
          type: string
          maximum: 50
          example: Loki Laufeyson
        image:
            type: string
            format: binary
        age:
          type: number
          example: 1020
        weight:
          type: number
          example: 80.5
        history:
          type: string
          example: Loki Laufeyson fue el hijo de Laufey, pero fue abandonado por este después de su nacimiento. Tras ser encontrado por el Rey de Asgard, Odín, Loki fue criado por la Familia Real Asgardiana junto con Thor. Él se ganó una reputación como el Dios de las Mentiras y organizó un plan para hacer que Odín destierre a Thor, convirtiéndose en el sucesor del trono de Asgard, mientras descubría su verdadero pasado. Loki tuvo éxito y asumió el trono cuando Odín cayó en el Sueño de Odín y decidió alistarse para destruir Jotunheim, sin embargo, como Thor fue ayudado por los Tres Guerreros a regresar a Asgard, Loki lo confrontó y, cuando sus planes fueron desaprobados por Odín, él se dejó caer al vacío durante el Duelo en el Puente Arcoíris.
        films:
          type: array
          uniqueItems: true
          items:
            type: object
            properties:
              title:
                type: string
          example:
            - title: Loki

            
    ResponseGetCharacter:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageURL:
          type: string
          format: binary
        imagePublicId:
          type: string
        age:
          type: number
        weight:
          type: number
        history:
          type: string
        films:
          type: array
          uniqueItems: true
          items:
            type: number
        createdAt:
          type: string
        updatedAt:
          type: string
          
    ResponseGetCharacters:
      type: array
      items:
          $ref: '#/components/schemas/ResponseGetCharacter'
          
    BodyUpdateCharacter:
      type: object
      required:
        - name
        - age
        - weight
        - history
      properties:
        name:
          type: string
          maximum: 50
          example: Loki Laufeyson
        age:
          type: number
          example: 1020
        weight:
          type: number
          example: 80.5
        history:
          type: string
          example: Loki Laufeyson fue el hijo de Laufey, pero fue abandonado por este después de su nacimiento. Tras ser encontrado por el Rey de Asgard, Odín, Loki fue criado por la Familia Real Asgardiana junto con Thor. Él se ganó una reputación como el Dios de las Mentiras y organizó un plan para hacer que Odín destierre a Thor, convirtiéndose en el sucesor del trono de Asgard, mientras descubría su verdadero pasado. Loki tuvo éxito y asumió el trono cuando Odín cayó en el Sueño de Odín y decidió alistarse para destruir Jotunheim, sin embargo, como Thor fue ayudado por los Tres Guerreros a regresar a Asgard, Loki lo confrontó y, cuando sus planes fueron desaprobados por Odín, él se dejó caer al vacío durante el Duelo en el Puente Arcoíris.
        films:
          type: array
          uniqueItems: true
          items:
            type: object
            properties:
              title:
                type: string
          example:
            - title: Loki
            - title: "Thor: The dark world"